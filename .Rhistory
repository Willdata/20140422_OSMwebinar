for(i<10000) {
a = (a+2)^0.5
print(a)
i=i+1
}
a <- 2
i <- 0
for(i < 10000) {
a <- (a+2)^0.5
print(a)
i<-i+1
}
a <- 2
i <- 0
for(i in 0:10000) {
a <- (a+2)^0.5
print(a)
i <- i+1
}
a <- 5
i <- 0
for(i in 0:10000) {
a <- (a+5)^0.5
print(a)
i <- i+1
}
a <- 5
i <- 0
for(i in 0:10) {
a <- (a+5)^0.5
print(a)
i <- i+1
}
a <- 2^0.5
i <- 0
for(i in 0:10) {
a <- (a+2)^0.5
print(a)
i <- i+1
}
a <- 2^0.5
i <- 0
for(i in 0:10) {
a <- (a+2)^0.5
print(a)
i <- i+1
}
a <- 2
i <- 0
for(i in 0:10) {
a <- (a+2)^0.5
print(a)
i <- i+1
}
a <- 0.2
i <- 0
for(i in 0:10) {
a <- (a+2)^0.5
print(a)
i <- i+1
}
a <- 2^0.5
i <- 0
for(i in 0:10) {
a <- (a+2)^0.5
print(a)
i <- i+1
}
hos_list <- as.vector(levels(kaoh_clin$hos1Name))
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
hosp_list <- read.csv("~/Dropbox/tmp/python/list.csv", fileEncoding="UTF-8")
attach(hosp_list)
hosp_list$clinicRef <- as.factor(clinicRef)
hosp_list$groupRef <- as.factor(groupRef)
hosp_list$hos1Ref <- as.factor(hos1Ref)
hosp_list$hos2Ref <- as.factor(hos2Ref)
hosp_list$hos3Ref <- as.factor(hos3Ref)
hosp_list$hos4Ref <- as.factor(hos4Ref)
library(ggmap)
library(leafletR)
library(scales)
hosp_list <- read.csv("~/Dropbox/tmp/python/list.csv", fileEncoding="UTF-8")
attach(hosp_list)
hosp_list$clinicRef <- as.factor(clinicRef)
hosp_list$groupRef <- as.factor(groupRef)
hosp_list$hos1Ref <- as.factor(hos1Ref)
hosp_list$hos2Ref <- as.factor(hos2Ref)
hosp_list$hos3Ref <- as.factor(hos3Ref)
hosp_list$hos4Ref <- as.factor(hos4Ref)
head(hosp_list)
head(hosp_list, 100)
sub.1 <- head(hosp_list, 900)
sub.2 <- tail(head(hosp_list, 1800), 900)
sub.3 <- tail(hosp_list, 697)
View(sub.2)
head(sub.2)
tail(sub.1)
head(sub.3)
View(sub.1)
View(sub.2)
View(hosp_list)
View(sub.3)
View(sub.1)
gps.1 <- geocode(sub.1$clinicAddr)
gps.1 <- geocode(as.character(sub.1$clinicAddr))
View(sub.1)
View(gps.1)
write.csv(gps.1, "gps1.csv")
geocodeQueryCheck
geocodeQueryCheck()
sub.1 <- cbind(sub.1, gps.1)
write.csv(sub.1, "sub1.csv")
s.dat <- toGeoJSON(data=sub.1, lat.lon = c("lat", "lon"))
s.map <- leaflet(data=s.dat)
s.map <- leaflet(data=s.dat)
s.map <- leaflet(data=s.dat)
View(gps.1)
gps.2 <- geocode(as.character(sub.2$clinicAddr))
sub.2 <- cbind(sub.2, gps.2)
write.csv(sub.2, "sub2.csv")
View(gps.2)
geocodeQueryCheck()
gps.3 <- geocode(as.character(sub.3$clinicAddr))
sub.3 <- cbind(sub.3, gps.3)
write.csv(sub.3, "sub3.csv")
geocodeQueryCheck()
gps.3 <- geocode(as.character(sub.3$clinicAddr))
hosp_list <- read.csv("~/Dropbox/tmp/python/list.csv", fileEncoding="UTF-8")
library(ggmap)
library(leafletR)
library(scales)
gps.3 <- geocode(as.character(sub.3$clinicAddr))
sub.3 <- cbind(sub.3, gps.3)
write.csv(sub.3, "sub3.csv")
list.total<-rbind(sub.1, sub.2, sub.3)
clinic.list <- read.csv("~/Dropbox/tmp/python/list.csv", fileEncoding="UTF-8")
View(list.total)
clinic.list.gps<-rbind(sub.1, sub.2, sub.3)
View(clinic.list.gps)
write.csv(clinic.list.gps, "clinicGPS.csv")
library(leafletR)
s.dat<- toGeoJSON(clinic.list.gps, lat.lon=c("lat", "lon"))
levels(clinic.list.gps$hos1Ref)
c(levels(clinic.list.gps$hos1Ref), levels(clinic.list.gps$hos2Ref)
)
c(levels(clinic.list.gps$hos1Ref), levels(clinic.list.gps$hos2Ref), levels(clinic.list.gps$hos3Ref), levels(clinic.list.gps$hos4Ref))
droplevels(c(levels(clinic.list.gps$hos1Ref), levels(clinic.list.gps$hos2Ref), levels(clinic.list.gps$hos3Ref), levels(clinic.list.gps$hos4Ref)))
levels(c(levels(clinic.list.gps$hos1Ref), levels(clinic.list.gps$hos2Ref), levels(clinic.list.gps$hos3Ref), levels(clinic.list.gps$hos4Ref)))
str(c(levels(clinic.list.gps$hos1Ref), levels(clinic.list.gps$hos2Ref), levels(clinic.list.gps$hos3Ref), levels(clinic.list.gps$hos4Ref)))
as.factor(c(levels(clinic.list.gps$hos1Ref), levels(clinic.list.gps$hos2Ref), levels(clinic.list.gps$hos3Ref), levels(clinic.list.gps$hos4Ref)))
as.factor(c(levels(clinic.list.gps$hos1Name), levels(clinic.list.gps$hos2Name), levels(clinic.list.gps$hos3Name), levels(clinic.list.gps$hos4Name)))
levels(as.factor(c(levels(clinic.list.gps$hos1Name), levels(clinic.list.gps$hos2Name), levels(clinic.list.gps$hos3Name), levels(clinic.list.gps$hos4Name))))
as.factor(c(levels(clinic.list.gps$hos1Ref), levels(clinic.list.gps$hos2Ref), levels(clinic.list.gps$hos3Ref), levels(clinic.list.gps$hos4Ref)))
library(leaflet)
library(leafletR)
leaflet(s.dat)
s.dat <- toGeoJSON(clinic.list.gps)
leaflet(s.dat)
bikestation <- read.csv("~/bikestation.csv")
View(bikestation)
bikestation <- read.csv("~/bikestation.csv")
View(bikestation)
plot(bikestation)
unique(bikestation$stationID)
unique(bikestation$stationID)
unique(bikestation$stationID)
unique(bikestation$stationNO)
install.packages("spider")
install.packages("graphics")
install.packages("graphics")
install.packages("graphics")
install.packages("googleVis")
install.packages("rCharts")
install.packages("rCharts")
version()
version
install.packages("rCharts")
install.packages("snp.plotter")
install.packages("Gephi")
install.packages(c("boot", "Cairo", "cluster", "corrplot", "foreign", "formatR", "geosphere", "hexbin", "highr", "KernSmooth", "lattice", "leafletR", "mapproj", "markdown", "MASS", "Matrix", "mgcv", "nlme", "oro.dicom", "oro.nifti", "pastecs", "plyr", "psych", "Rcpp", "rgl", "rpart", "shiny", "slam", "survival", "tm", "vcd", "xtable"))
?googleVis
?GoogleVis
install.packages("devtools")
library(devtools)
install_github("rCharts", "ramnathv")
library(googleVis)
Fruits
bar <- gvisColumnChart(Fruits)
plot(bar)
install.packages("slide")
examaple(plots)
example(plots)
example(plot)
example(ggmap)
example(ggmaps)
library(ggmap)
library(sos)
install.packages("sos")
library(sos)
?sos
help(findFn)
findFn("leaflet")
findFn("map")
install.packages("mvd3")
install_github("recharts", "taiyun")
library(devtools)
install_github("recharts", "taiyun")
install_github("slidify", "ramnathv")
library(slidify)
help(slidify)
install.packages("quantmod")
install.packages("googlePublicData")
library("quantmod", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
example("quantmod")
example(quantmod)
symbols
library(quantmod)
getSymbols('IBM', src="yahoo")
ad(IBM)
Ad(IBM)
Cl(IBM)
TWII
Ad(IBM)
Cl(IBM)
Ad(IBM)
ClCl(IBM)
setSymbolLookup
getSymbolLookup
setSymbolLookup()
getSymbolLookup()
getSymbolLookup(Symbols=NULL)
getSymbols("TWD/USD", src="Oanda")
getSymbols("XPT/USD",src="Oanda")
library(quantmod)
getSymbols("XPT/USD",src="Oanda")
getSymbols("XPT/USD",src="anda")
getSymbols("XPT/USD",src="oanda")
getSymbols("TWD/USD",src="oanda")
TWDUSD
str(TWDUSD)
plot(TWDUSD)
plot(IBM)
plot(TWDUSD)
plot(XPTUSD)
x <- 1:10
y <- 2:11
plot(x,y)
plot(XPTUSD)
library(shiny)
runGitHub('communitymedcare', 'mcdlee')
setwd("~/Dropbox/git/communitymedcare/")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(rCharts)
db <- read.csv("content/clinicGPS.csv")
for(i in 1:(length(db)-2)){
db[[i]] <- as.factor(db[[i]])
}
filterList <- function (crit) {
L1 <- subset(db, hos1Name==crit |hos2Name==crit |hos3Name==crit | hos4Name==crit, select=c(clinicName, lon, lat))
return(L1)
}
plotMap <- function(data) {
center <- c(mean(data$lat), mean(data$lon))
L2 <- Leaflet$new()
L2$setView(center, 12)
L2$geoJson(toGeoJSON(data), lat.lon=c("lat", "lon"))
return(L2)
}
plotMap(db)
plotMap(db)
L2$setView(center, 12)
L2$geoJson(toGeoJSON(data))
return(L2)
}
plotMap <- function(data) {
center <- c(mean(data$lat), mean(data$lon))
L2 <- Leaflet$new()
L2$setView(center, 12)
L2$geoJson(toGeoJSON(data))
return(L2)
}
plotMap(db)
toGeoJSON()
toGeoJSON(db,lat="lat", lon="lon")
toGeoJSON(db,lat=lat, lon=lon)
toGeoJSON(db,lat=db$lat, lon=db$lon)
toGeoJSON(db)
setwd("~")
library(XML)
q()
library(XML)
library(rjson)
url = "http://www.taipei.gov.tw/site/tcg/public/MMO/ogdi/giant_stations.js"
fromJSON(url)
fromJSON(url)
fromJSON(fil=url)
fromJSON(file=url)
library(jsonlite)
fromJSON(url)
fromJSON(url)
url = "http://www.taipei.gov.tw/site/tcg/public/MMO/ogdi/giant_stations.js"
fromJSON(url)
fromJSON("http://www.taipei.gov.tw/site/tcg/public/MMO/ogdi/giant_stations.js")
fromJSON("http://www.taipei.gov.tw/site/tcg/public/MMO/ogdi/giant_stations.js")
library(rjson)
fromJSON(readline(url))
fromJSON(readLines(url))
text <- readLines(url)
text
text <- text[-1]
text
fromJSON(text)
object.size(base)
object.size()
load("~/Dropbox/tmp/R/community_health_test/content/clinicGPS.csv")
load("~/Dropbox/tmp/R/community_health_test/content/clinicGPS.csv")
read.csv("~/Dropbox/tmp/R/community_health_test/content/clinicGPS.csv")
cList <- read.csv("~/Dropbox/tmp/R/community_health_test/content/clinicGPS.csv")
head(cList)
head(cList, 50)
head(cList, 100)
cList<-head(cList, 100)
write.csv(cList,)
write.csv(cList)
write.csv(cList, "~/")
write.csv(cList, "~/cList.csv")
cList
col.names(cList)
colnames(cList)
setwd("~/Dropbox/Public/talk/20140422_RandLeaflet/")
cList <- read.csv("cList.csv")
colnames(cList)
View(cList)
cList <- read.csv("cList.csv")
colnames(cList)
cList <- read.csv("cList.csv")
cList <- read.csv("cList.csv")
colnames(cList)
cList <- read.csv("cList.csv")
colnames(cList)
library(leafletR)
s.dat <- toGeoJSON(data=cList, lat.lon=c("lat", "lon"))
s.sty <- styleCat(prop="groupName",val=grouplist, style.val= hue_pal()(length(grouplist)))
s.sty <- styleCat(prop="groupName",val=grouplist, style.val= hue_pal()(length(grouplist)))
library(scales)
s.dat <- toGeoJSON(data=cList, lat.lon=c("lat", "lon"))
s.sty <- styleCat(prop="groupName",val=grouplist, style.val= hue_pal()(length(grouplist)))
s.sty <- styleCat(prop="groupName",val=grouplist, style.val= hue_pal()(16)
)
s.sty <- styleCat(prop="groupName",val=grouplist, style.val= hue_pal()(16))
groupList <- levels(cList$groupName)
s.sty <- styleCat(prop="groupName",val=grouplist, style.val= hue_pal()(length(grouplist)))
groupList <- levels(cList$groupName)
s.sty <- styleCat(prop="groupName",val=grouplist, style.val= hue_pal()(length(grouplist)))
grouplist <- levels(cList$groupName)
s.sty <- styleCat(prop="groupName",val=grouplist, style.val= hue_pal()(length(grouplist)))
s.map <- leaflet(data=s.dat, style=s.sty, base.map = c("osm", "cm", "mqosm"), popup="clinicRef")
s.dat <- toGeoJSON(data=cList, lat.lon=c("lat", "lon"), dest=tempdir())
s.sty <- styleCat(prop="groupName",val=grouplist, style.val= hue_pal()(length(grouplist)))
s.sty <- styleCat(prop="groupName",val=grouplist, style.val= hue_pal()(length(grouplist)))
s.map <- leaflet(data=s.dat, style=s.sty, base.map = c("osm", "cm", "mqosm"), popup="clinicRef",  dest=tempdir())
browseURL(s.map)
library(leafletR)
library(scaless)
s.dat <- toGeoJSON(data=cList, lat.lon=c("lat", "lon"), dest=tempdir())
s.sty <- styleCat(prop="groupName",val=grouplist, style.val= hue_pal()(length(grouplist)))
s.map <- leaflet(data=s.dat, style=s.sty, base.map = c("osm", "cm", "mqosm"), popup="clinicRef",  dest=tempdir())
browseURL(s.map)
s.dat <- toGeoJSON(data=cList, lat.lon=c("lat", "lon"), dest=tempdir())
s.sty <- styleCat(prop="groupName",val=grouplist, style.val= hue_pal()(length(grouplist)))
s.map <- leaflet(data=s.dat, style=s.sty, base.map = c("osm", "cm", "mqosm"), popup="clinicRef",  dest=tempdir())
browseURL(s.map)
cList <- read.csv("cList.csv")
colnames(cList)
grouplist <- levels(cList$groupName)
library(leafletR)
library(leafletR)
library(scales)
s.dat <- toGeoJSON(data=cList, lat.lon=c("lat", "lon"), dest=tempdir())
browseURL(s.dat)
s.dat <- toGeoJSON(data=cList, lat.lon=c("lat", "lon"))
s.sty <- styleCat(prop="groupName",val=grouplist, style.val= hue_pal()(length(grouplist)))
s.map <- leaflet(data=s.dat, style=s.sty, base.map = c("osm", "cm", "mqosm"), popup="clinicRef")
browseURL(s.map)
library(leafletR)
library(scales)
s.dat <- toGeoJSON(data=cList, lat.lon=c("lat", "lon"))
s.sty <- styleCat(prop="groupName",val=grouplist, style.val= hue_pal()(length(grouplist)))
s.map <- leaflet(data=s.dat, style=s.sty, base.map = c("osm", "cm", "mqosm"), popup="clinicRef")
browseURL(s.map)
library(leafletR)
library(scales)
s.dat <- toGeoJSON(data=cList, lat.lon=c("lat", "lon"))
s.sty <- styleCat(prop="groupName",val=grouplist, style.val= hue_pal()(length(grouplist)))
s.map <- leaflet(data=s.dat, style=s.sty, base.map = c("osm", "cm", "mqosm"), popup=c("clinicName", "clinicAddr"))
browseURL(s.map)
library(rCharts)
library(rCharts)
#from data.frame to list
getList <- function (df) {
#for color
groupPool <<- levels(droplevels(df$groupName))
groupNum <<- length(groupPool)
colorPal <<- hue_pal()(groupNum)
L2 <- dlply(df, .(X),.drop=TRUE,
summarize,
Name = clinicName,
Addr = clinicAddr,
group = groupName,
groupRef = groupRef,
longitude=lon, latitude=lat,
fillColor = colorPal[match(groupName, groupPool)],
popup = sprintf("%s <br/> %s", clinicName, groupName)
)
for(i in 1:length(L2)) {
L2[[i]] <- as.list(L2[[i]])
}
return(L2)
}
plotMap <- function(data) {
center <- getCenter(data)
list <- getList(data)
L3 <- Leaflet$new()
L3$set(width=800, height=500)
L3$setView(center,11)
L3$tileLayer(provider = 'MapQuestOpen.OSM')
L3$geoJson(toGeoJSON(list),
onEachFeature = '#! function(feature, layer){
layer.bindPopup(feature.properties.popup)
} !#',
pointToLayer = "#! function(feature, latlng){
return L.circleMarker(latlng, {
radius: 8,
fillColor: feature.properties.fillColor || 'red',
color: '#000',
weight: 0.5,
fillOpacity: 0.7
})
} !#")
L3$legend(position="bottomright", colors = colorPal, labels=groupPool)
L3$fullScreen(TRUE)
return(L3)
}
library(rCharts)
#from data.frame to list
getList <- function (df) {
#for color
groupPool <<- levels(droplevels(df$groupName))
groupNum <<- length(groupPool)
colorPal <<- hue_pal()(groupNum)
L2 <- dlply(df, .(X),.drop=TRUE,
summarize,
Name = clinicName,
Addr = clinicAddr,
group = groupName,
groupRef = groupRef,
longitude=lon, latitude=lat,
fillColor = colorPal[match(groupName, groupPool)],
popup = sprintf("%s <br/> %s", clinicName, groupName)
)
for(i in 1:length(L2)) {
L2[[i]] <- as.list(L2[[i]])
}
return(L2)
}
#get center
getCenter <- function(data) {
center <- c(mean(data$lat), mean(data$lon))
return(center)
}
plotMap <- function(data) {
center <- getCenter(data)
list <- getList(data)
L3 <- Leaflet$new()
L3$set(width=800, height=500)
L3$setView(center,11)
L3$tileLayer(provider = 'MapQuestOpen.OSM')
L3$geoJson(toGeoJSON(list),
onEachFeature = '#! function(feature, layer){
layer.bindPopup(feature.properties.popup)
} !#',
pointToLayer = "#! function(feature, latlng){
return L.circleMarker(latlng, {
radius: 8,
fillColor: feature.properties.fillColor || 'red',
color: '#000',
weight: 0.5,
fillOpacity: 0.7
})
} !#")
L3$legend(position="bottomright", colors = colorPal, labels=groupPool)
L3$fullScreen(TRUE)
return(L3)
}
plotMap(cList)
library(plyr)
plotMap(cList)
getList(cList)
glist <- getList(cList)
glist
